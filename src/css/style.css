/*
 * 1. Allow content to size flex item
 * 2. Always display header over other content
 */
.header {
  background-color: var(--color-black);
  position: sticky;
  top: 0;
  padding: 0;
  flex-shrink: 0; /* 1 */
  z-index: 3; /* 2 */
  box-shadow: 0 2px 14px rgba(0, 0, 0, 0.24);
}

@media (orientation: portrait) and (min-width: 768px),
  (orientation: landscape) and (min-width: 1024px) {
  .header {
    padding: var(--spacing-large) 0;
  }
}

.header a {
  color: var(--color-white);
}

.header a:not(:hover) {
  background-color: var(--color-black);
}

/*
 * 1. Allow content to size flex item
 * 2. Display navbar over Loader
 */
.nav {
  background-color: var(--color-light-grey);
  flex-shrink: 0; /* 1 */
  z-index: 2; /* 2 */
}

.search-input {
  padding: var(--spacing-medium);
  border: 1px solid var(--color-green-accent);
  font-style: normal;
  margin-right: var(--spacing-small);
}

.search-submit {
  padding: var(--spacing-medium);
  color: #fff;
  background-color: var(--color-green-accent);
  border: 0;
  font-style: normal;
  text-transform: uppercase;
  border: 1px solid var(--color-green-accent);
  border-radius: 5px;
}

.main {
  background-color: var(--color-white);
  flex-grow: 1;
}

.content {
  max-width: var(--max-content-width);
  margin: 0 auto;
  padding: var(--spacing-medium);
}

@media (orientation: portrait) and (min-width: 768px),
  (orientation: landscape) and (min-width: 1024px) {
  .content {
    padding: var(--spacing-large) var(--spacing-medium);
  }
}

/*
 * 1. Instruct grid to fill rows with as many columns will fit
 *    depending on the min and max thesholds forcolumn width.
 *
 *    This way columns are flexible, but the grid will also try
 *    and fit as many into a row as there is space.
 */
.grid {
  display: grid;
  grid-template-columns: repeat(
    auto-fill,
    minmax(var(--min-grid-item-width), max-content)
  ); /* 1 */
  grid-column-gap: var(--spacing-large);
  grid-row-gap: var(--spacing-large);
  grid-auto-flow: dense; /* 1 */
  padding: 0;
  list-style: none;
}

@media (orientation: portrait) and (min-width: 768px),
  (orientation: landscape) and (min-width: 1024px) {
  .grid {
    grid-template-columns: repeat(
      auto-fill,
      minmax(var(--desktop-min-grid-item-width), max-content)
    );
  }
}

.grid-item {
  background-color: var(--color-light-grey);
  overflow: hidden;
  border-radius: 5px;
}

.grid-item img {
  width: 100%;
  position: relative;
}

/*
 * Fallback image if src is empty
 */
.grid-item img:before {
  content: ' ';
  display: block;
  background-color: red;
  position: absolute;
  height: 100%;
  width: 100%;
}

.grid-item a {
  display: flex;
  flex-direction: column;
  min-height: 100%;
  padding: 0;
}

.grid-item .desc {
  background-color: var(--color-darkgreen-accent);
  flex-grow: 1;
  display: block;
  padding: var(--spacing-medium);
  color: var(--color-light-grey);
  border-top: 1px solid var(--color-white);
}

/*
 * 1. Scale the image size down relative to the container
 * 2. Position the image top-left in the container
 */
.artwork {
  width: 100%;
  max-height: var(--max-image-height);
  max-width: var(--max-image-width);
  object-fit: contain; /* 1 */
  object-position: 0 0; /* 2 */
  margin-bottom: var(--vertical-rhythm);
}

.pagination {
  list-style: none;
  display: flex;
  flex-direction: row;
  flex-wrap: nowrap;
  justify-content: space-around;
  max-width: 400px;
  margin-left: auto;
  margin-right: auto;
}

.footer {
  background-color: var(--color-black);
  color: var(--color-light-grey);
  flex-shrink: 0;
  z-index: 2;
}

.disclaimer {
  font-size: 0.8rem;
}
